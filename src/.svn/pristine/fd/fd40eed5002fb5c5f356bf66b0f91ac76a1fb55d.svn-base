import { Component, OnInit } from '@angular/core';
import {Router} from '@angular/router';
import {AuthService} from '../../utility/auth-service';
import {LoginProvider} from './login.provider';
import {FormGroup, FormBuilder, FormControl, Validators} from '@angular/forms';
import {MatSnackBar, MatDialogRef} from '@angular/material';
import {SiUtil} from '../../utility/SiUtil';

@Component({
    selector: 'app-login',
    templateUrl: './login.component.html',
    styleUrls: ['./login.component.scss']
})
export class LoginComponent implements OnInit {
    loadingRegistration: boolean = false;
    loadingLogin: boolean = false;
    registerForm: boolean = false;
    callingCode: string;
    registrationModel: {mobileNo?: number, fullName?: string, emailId?: string, password?: string, provider?: string, photoURL?: string, uid?: string} = {};
    loginModel: {emailId?: string, password?: string} = {};
    registrationForm: FormGroup;
    loginForm: FormGroup;
    hide = true;
    constructor(public router: Router, private util:SiUtil, public auth: AuthService, public provider: LoginProvider, private fb: FormBuilder, private snackBar: MatSnackBar, public dialogRef: MatDialogRef<LoginComponent>) {
        this.validateRegistrationForm();
        this.validateLoginForm();
    }

    ngOnInit() {
        this.callingCode = localStorage.getItem("callingCode");
    }
    
    validName() {
        return this.registrationForm.get('REGISTERATION_NAME').errors['required'] ? 'You must enter a name' :
            '';
    }
    
    validEmail() {
        return this.registrationForm.get('REGISTERATION_EMAIL_ID').errors['required'] ? 'You must enter a email id' :
            this.registrationForm.get('REGISTERATION_EMAIL_ID').errors['email'] ? 'Not a valid email' :
            '';
    }
    
    validPassword() {
        return this.registrationForm.get('REGISTERATION_PASSWORD').errors['required'] ? 'You must enter a value' :
            this.registrationForm.get('REGISTERATION_PASSWORD').errors['maxLength'] ? 'Max carecter is 15' :
                this.registrationForm.get('REGISTERATION_PASSWORD').errors['minLength'] ? 'Min carecter is 5' :
                    '';
    }
    
    validLoginEmail() {
        return this.loginForm.get('LOGIN_EMAIL_ID').errors['required'] ? 'You must enter a email id' :
            this.loginForm.get('LOGIN_EMAIL_ID').errors['email'] ? 'Not a valid email' :
            '';
    }
    
    validLoginPassword() {
        return this.loginForm.get('LOGIN_PASSWORD').errors['required'] ? 'You must enter a value' :
            this.loginForm.get('LOGIN_PASSWORD').errors['maxLength'] ? 'Max carecter is 15' :
                this.loginForm.get('LOGIN_PASSWORD').errors['minLength'] ? 'Min carecter is 5' :
                    '';
    }
    
    validMobile() {
        return this.registrationForm.get('REGISTERATION_MOBILE_NO').errors['required'] ? 'You must enter a mobile number' :
            this.registrationForm.get('REGISTERATION_MOBILE_NO').errors['maxLength'] ? 'Max carecter is 11' :
                this.registrationForm.get('REGISTERATION_MOBILE_NO').errors['minLength'] ? 'Min carecter is 10' :
                    '';
    }
    
    validateRegistrationForm()
    {
        this.registrationForm = this.fb.group({
            REGISTERATION_EMAIL_ID : new FormControl('', [Validators.email, Validators.required]),
            REGISTERATION_PASSWORD : new FormControl('', [Validators.required, Validators.maxLength(15), Validators.minLength(5)]),
            REGISTERATION_NAME : new FormControl('', [Validators.required]),
            REGISTERATION_MOBILE_NO : new FormControl('', [Validators.required, Validators.maxLength(11), Validators.minLength(10)]),
        })
    }
    
    validateLoginForm()
    {
        this.loginForm = this.fb.group({
            LOGIN_EMAIL_ID : new FormControl('', [Validators.email, Validators.required]),
            LOGIN_PASSWORD : new FormControl('', [Validators.required, Validators.maxLength(15), Validators.minLength(5)]),
        })
    }
    
    openRegistration()
    {
        this.registerForm = true
    }
    
    checkEmailId(email)
    {
        this.auth.checkEmail(email).then(data =>
        {
            if (data.length != 0)
            {
                this.util.toastError("Error", "The email address is already in use by another account");
            }
        }).catch(error =>
        {
            console.log(error);
        })
    }
    
    registration(Obj)
    {
        this.loadingRegistration = true;
        this.auth.emailSignUp(this.registrationModel.emailId, this.registrationModel.password).then((registrationData: any) =>
        {
            this.registrationModel.provider = "Gmail";
            this.registrationModel.uid = registrationData.uid;
            this.provider.saveRestroUser(this.registrationModel).then(uid => 
            {
                this.loadingRegistration = false;
                this.registerForm = false;
            }).catch(error => 
            {
                this.loadingRegistration = false;
                var message = error;
                var action = " ";
                this.showErrorAlert(message, action);
            })
        }).catch(error =>
        {
            var message = error;
            var action = " ";
            this.showErrorAlert(message, action);
        })
    }
    
    login(Obj)
    {
        this.loadingLogin = true;
        this.auth.emailLogin(this.loginModel.emailId, this.loginModel.password).then((loginData: any) =>
        {
            localStorage.setItem('isLoggedin', 'true');
            this.dialogRef.close();
        }).catch(error =>
        {
            var message = error;
            var action = " ";
            this.showErrorAlert(message, action);
            this.loadingLogin = false;
        })
    }
    
    async callFacebook()
    {
        await this.facebookLogin();
        this.dialogRef.close();
    }
    
    async facebookLogin()
    {
        await this.auth.facebookLogin().then((status: any) =>
        {
            if (typeof status == "undefined")
            {
                var message = "The email address is already in use by another account.";
                var action = " ";
                this.showErrorAlert(message, action);
            }
            if (status)
            {
                localStorage.setItem('isLoggedin', 'true');
                this.provider.getRestroUserData(status.uid).then((restroUserData: any) => 
                {
                    if (typeof restroUserData === "undefined" || restroUserData === null) 
                    {
                        status.provider = "facebook.com";
                        this.provider.saveRestraunt(status).then(success => 
                        {
                            this.dialogRef.close();
                        })
                    }
                    else 
                    {
                        this.dialogRef.close();
                    }
                })
            }
        }).catch(error =>
        {
            console.log(error)
        })
    }
    
    async callGoogle()
    {
        await this.googleLogin();
        this.dialogRef.close();
    }
    
    async googleLogin()
    {
        await this.auth.googleLogin().then((status: any) =>
        {
            localStorage.setItem('isLoggedin', 'true');
            this.provider.getRestroUserData(status.uid).then((restroUserData: any) =>
            {
                if (typeof restroUserData === "undefined" || restroUserData === null)
                {
                    status.provider = "google.com";
                    this.provider.saveRestraunt(status).then(success =>
                    {
                        this.dialogRef.close();
                    })
                }
                else
                {
                    this.dialogRef.close();
                }
            })
            
        }).catch(error =>
        {
            console.log(error);
        })
    }
    
    showErrorAlert(message: string, action: string)
    {
        this.snackBar.open(message, action, {
            duration: 5000
        });
    }
    
    openLogin()
    {
        this.registerForm = false
    }
}
