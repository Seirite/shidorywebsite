import { Component, OnInit } from '@angular/core';
import {Router} from '@angular/router';
import {AuthService} from '../../utility/auth-service';
import {LoginProvider} from './login.provider';
import {FormGroup, FormBuilder, FormControl, Validators} from '@angular/forms';
import {MatSnackBar, MatDialogRef, MatStepper} from '@angular/material';
import {SiUtil} from '../../utility/SiUtil';
import * as firebase from 'firebase';
export class LoginForm{
    fullName:string;
    emailId:string;
    mobileNo:any;
    contryCode:any;
    uid:any;
    photoURL:any;
    key:any;
}
@Component({
    selector: 'app-login',
    templateUrl: './login.component.html',
    styleUrls: ['./login.component.scss'],
    
})
export class LoginComponent implements OnInit {
    checkStatus: boolean=false;
    windowRef: any;
    userLoginForm: LoginForm;
    countryList: any;
    verifyStatus: boolean = false;
    visibleVerifyForm: boolean = false;
    loadingRegistration: boolean = false;
    loadingLogin: boolean = false;
    registerForm: boolean = false;
    callingCode: string;
    registrationModel: {mobileNo?: number, fullName?: string, emailId?: string, password?: string, provider?: string, photoURL?: string, uid?: string} = {};
    loginModel: {emailId?: string, password?: string} = {};
    registrationForm: FormGroup;
    loginForm: FormGroup;
    hide = true;
   isLinear = true;
  firstFormGroup: FormGroup;
  secondFormGroup: FormGroup;
  showError: boolean = false;
    loader: boolean = false;
    verificationCode: any;
    otpInput1 : number;
    otpInput2 : number;
    otpInput3 : number;
    otpInput4 : number;
    otpInput5 : number;
    otpInput6 : number;
    otpNumber:string;
    constructor(public router: Router, private util:SiUtil,private formBuilder: FormBuilder, 
                public auth: AuthService, public provider: LoginProvider, private fb: FormBuilder, private snackBar: MatSnackBar, public dialogRef: MatDialogRef<LoginComponent>) {
        this.validateRegistrationForm();
        this.validateLoginForm();
        this.userLoginForm = new LoginForm();
    }

    ngOnInit() {
//        this.windowRef = window;
        
    this.firstFormGroup = this.formBuilder.group({
      name: ['', Validators.required],
      code: ['', Validators.required],
//      email: ['', Validators.required],
      mobile: ['', Validators.required]
    });
    this.secondFormGroup = this.formBuilder.group({
      one: ['', Validators.required],
      two: ['', Validators.required],
      three: ['', Validators.required],
      four: ['', Validators.required],
      five: ['', Validators.required],
      six: ['', Validators.required]
    });
        
        this.callingCode = localStorage.getItem("callingCode");
        this.provider.getCountryList().subscribe(list=>{
            this.countryList = list;
        })
    }
    
    
    next1(el, val) {
         el.setFocus();
    }
    preview(el) {
        console.log(el)
        if (el == 'otp4') {
            el.setFocus();
        }
    }
    
    validName() {
        return this.registrationForm.get('REGISTERATION_NAME').errors['required'] ? 'You must enter a name' :
            '';
    }
    
    validEmail() {
        return this.registrationForm.get('REGISTERATION_EMAIL_ID').errors['required'] ? 'You must enter a email id' :
            this.registrationForm.get('REGISTERATION_EMAIL_ID').errors['email'] ? 'Not a valid email' :
            '';
    }
    
    validPassword() {
        return this.registrationForm.get('REGISTERATION_PASSWORD').errors['required'] ? 'You must enter a value' :
            this.registrationForm.get('REGISTERATION_PASSWORD').errors['maxLength'] ? 'Max carecter is 15' :
                this.registrationForm.get('REGISTERATION_PASSWORD').errors['minLength'] ? 'Min carecter is 5' :
                    '';
    }
    
    validLoginEmail() {
        return this.loginForm.get('LOGIN_EMAIL_ID').errors['required'] ? 'You must enter a email id' :
            this.loginForm.get('LOGIN_EMAIL_ID').errors['email'] ? 'Not a valid email' :
            '';
    }
    
    validLoginPassword() {
        return this.loginForm.get('LOGIN_PASSWORD').errors['required'] ? 'You must enter a value' :
            this.loginForm.get('LOGIN_PASSWORD').errors['maxLength'] ? 'Max carecter is 15' :
                this.loginForm.get('LOGIN_PASSWORD').errors['minLength'] ? 'Min carecter is 5' :
                    '';
    }
    
    validMobile() {
        return this.registrationForm.get('REGISTERATION_MOBILE_NO').errors['required'] ? 'You must enter a mobile number' :
            this.registrationForm.get('REGISTERATION_MOBILE_NO').errors['maxLength'] ? 'Max carecter is 11' :
                this.registrationForm.get('REGISTERATION_MOBILE_NO').errors['minLength'] ? 'Min carecter is 10' :
                    '';
    }
    
    validateRegistrationForm()
    {
        this.registrationForm = this.fb.group({
            REGISTERATION_EMAIL_ID : new FormControl('', [Validators.email, Validators.required]),
//            REGISTERATION_PASSWORD : new FormControl('', [Validators.required, Validators.maxLength(15), Validators.minLength(5)]),
            REGISTERATION_NAME : new FormControl('', [Validators.required]),
            REGISTERATION_MOBILE_NO : new FormControl('', [Validators.required, Validators.maxLength(11), Validators.minLength(10)]),
        })
    }
    
    validateLoginForm()
    {
        this.loginForm = this.fb.group({
            LOGIN_EMAIL_ID : new FormControl('', [Validators.email, Validators.required]),
            LOGIN_PASSWORD : new FormControl('', [Validators.required, Validators.maxLength(15), Validators.minLength(5)]),
        })
    }
    
    moveFocus(nextElement) 
    {
        this.showError = false;
        nextElement.focus();
    }
    
    openRegistration()
    {
        this.registerForm = true
    }
    
    checkEmailId(email)
    {
        this.auth.checkEmail(email).then(data =>
        {
            if (data.length != 0)
            {
                this.util.toastError("Error", "The email address is already in use by another account");
            }
        }).catch(error =>
        {
            console.log(error);
        })
    }
    
   
    
    showErrorAlert(message: string, action: string)
    {
        this.snackBar.open(message, action, {
            duration: 5000
        });
    }
    
    openLogin()
    {
        this.registerForm = false
    }
    
    
    loginUser(stepper:MatStepper){
        this.verifyStatus = true;
        this.windowRef = this.provider.windowRef;
        this.windowRef.recaptchaVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container')
        this.windowRef.recaptchaVerifier.render();
        this.windowRef.recaptchaVerifier.verify().then(async data =>
        {
            if (data)
            {
                await this.sendLoginCode(stepper);
            }
        }).catch(error =>
        {
            this.verifyStatus=false;
            var message = error;
                var action = " ";
                this.showErrorAlert(message, action);
        })
       
       
        
    }
    
    sendLoginCode(stepper:MatStepper){
        const num = this.userLoginForm.contryCode + this.userLoginForm.mobileNo;
        this.userLoginForm.mobileNo = this.userLoginForm.contryCode + this.userLoginForm.mobileNo;
        firebase.auth().signInWithPhoneNumber(num, this.windowRef.recaptchaVerifier)
            .then(result => {
                stepper.next();
                this.windowRef.confirmationResult = result;
            })
            .catch(error => {
                this.verifyStatus=false;
                var message = error;
                var action = " ";
                this.showErrorAlert(message, action);
            });
    }
    
    async verifyLoginCode() 
    {
        this.checkStatus =  true;
        if (this.otpInput1)
        {
            if (this.otpInput2)
            {
                if (this.otpInput3)
                {
                    if (this.otpInput4)
                    {
                        if (this.otpInput5)
                        {
                            if (this.otpInput6)
                            {
                                this.loader = true;
                                this.verificationCode = this.otpInput1.toString() + this.otpInput2.toString() + this.otpInput3.toString() + this.otpInput4.toString() + this.otpInput5.toString() + this.otpInput6.toString()
                                await this.windowRef.confirmationResult
                                    .confirm(this.verificationCode)
                                    .then(async result => 
                                    {
                                        this.userLoginForm.key = result.user.uid;
                                        this.userLoginForm.uid = result.user.uid;
                                        const data = {
                                            uid: this.userLoginForm.uid,
                                            email: this.userLoginForm.fullName || null,
                                            displayName: this.userLoginForm.fullName || 'nameless user',
                                            photoURL: 'assets/profile.png' || 'https://goo.gl/Fz9nrQ',
                                            ORG_ID: "1",
                                            OPR_ID: "1"
                                        };
                                        await this.auth.setSession(data);
                                        await this.provider.saveRestroUser(this.userLoginForm);
                                        localStorage.setItem('isLoggedin', 'true');
                                        this.dialogRef.close();
                                    })
                                    .catch(error => 
                                    {
                                        this.checkStatus = false;
                                        this.showError = true
//                                        this.dialogRef.close(error);
                                    });
                            }
                            else
                            {
                                this.showError = true
                                this.checkStatus = false;
                            }
                        }
                        else
                        {
                            this.showError = true
                             this.checkStatus = false;
                        }
                    }
                    else
                    {
                        this.showError = true
                         this.checkStatus = false;
                    }
                }
                else
                {
                    this.showError = true
                     this.checkStatus = false;
                }
            }
            else
            {
                this.showError = true
                 this.checkStatus = false;
            }
        }
        else
        {
            this.showError = true
             this.checkStatus = false;
        }
    }

}
